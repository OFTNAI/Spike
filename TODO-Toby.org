* DONE Add CMake build scripts
CLOSED: [2016-11-11 Fri 14:00]
:LOGBOOK:
- State "DONE"       from              [2016-11-11 Fri 14:00]
:END:
* DONE Refactor extant CUDA code into a backend
CLOSED: [2016-12-11 Sun 18:20]
:LOGBOOK:
- State "DONE"       from "PROGRESS"   [2016-12-11 Sun 18:20]
- State "PROGRESS"   from "TODO"       [2016-11-11 Fri 14:00]
:END:
** DONE Backend/CUDA/Synapses: copy Backend/Dummy/Synapses common classes
CLOSED: [2016-11-24 Thu 14:05]
:LOGBOOK:
- State "DONE"       from "TODO"       [2016-11-24 Thu 14:05]
:END:
** DONE Update CMake scripts to build CUDA code
CLOSED: [2016-12-11 Sun 00:50]
:LOGBOOK:
- State "DONE"       from "PROGRESS"   [2016-12-11 Sun 00:50]
- State "PROGRESS"   from "TODO"       [2016-11-30 Wed 15:40]
:END:
** CANCELLED Look for MISSING KERNELS ?!
CLOSED: [2016-12-11 Sun 18:20]
:LOGBOOK:
- State "CANCELLED"  from "TODO"       [2016-12-11 Sun 18:20] \\
  Don't need to do this, it seems: no missing kernels apparent.
:END:
+ check Backend/CUDA header files (esp Synapses/)
** DONE Remove `d_' from pointer names in CUDA backend classes ...
CLOSED: [2016-12-11 Sun 00:50]
:LOGBOOK:
- State "DONE"       from "PROGRESS"   [2016-12-11 Sun 00:50]
- State "PROGRESS"   from "TODO"       [2016-12-06 Tue 16:10]
:END:
** Questions / thoughts
*** What is a "backend"?
+ A set of classes / functions that performs the computations represented in the front end.
+ Specialises the computations for efficiency
  - but the front end is agnostic about these specialisations
  - consequently, there is a common API
+ Each backend can therefore be thought of as a 'sublibrary'
+ Front end only exposes the structure of the computations, not their implementation
  - but what divides 'structure' from 'implementation'?
    * this is the old 'structure'/'content' problem!...
+ Back end represents the state of the computation, as required by the associated device
*** What is the dispatch mechanism?
+ Each Model is associated with a context, and the context determines the backend
+ The context is associated with a device manager
* PROGRESS Make frontend classes backend-agnostic
:LOGBOOK:
- State "PROGRESS"   from "TODO"       [2016-11-20 Sun 12:10]
:END:
** PROGRESS Virtual functions in SpikeBackendBase should 'travel up' the hierarchy, calling leaf methods where appropriate. Leaf methods should themselves not be virtual, and not travel up the hierarchy, unless for a very good reason..
:LOGBOOK:
- State "PROGRESS"   from "TODO"       [2016-12-13 Tue 11:50]
:END:
** PROGRESS Make sure backends are actually prepared !!
:LOGBOOK:
- State "PROGRESS"   from "TODO"       [2016-12-11 Sun 18:20]
:END:
+ this means, for example, calling allocate_device_pointers from prepare in all relevant cases
  - CHECK THIS!!
** PROGRESS Fix all TODO comments in frontend code
:LOGBOOK:
- State "PROGRESS"   from "TODO"       [2016-12-11 Sun 00:50]
:END:
** DONE Fix dynamic_casts -- often return NULL when not casting to most derived backend type...
CLOSED: [2016-12-12 Mon 23:45]
:LOGBOOK:
- State "DONE"       from "TODO"       [2016-12-12 Mon 23:45]
:END:
** PROGRESS Call prepare_backend when making changes that require ensuring consistency between front and back ends
:LOGBOOK:
- State "PROGRESS"   from "TODO"       [2016-12-11 Sun 00:50]
:END:
+ NB: this is not the most elegant solution
** TODO Check all calls to `frontend()' to ensure elegance
** PROGRESS Check all [CUDA] memcpy calls for correct frontend() usage
:LOGBOOK:
- State "PROGRESS"   from "TODO"       [2016-12-10 Sat 17:45]
:END:
** PROGRESS Ensure dynamic dispatch is used as sparingly as possible
:LOGBOOK:
- State "PROGRESS"   from "TODO"       [2016-12-11 Sun 00:50]
:END:
+ don't want RTTI and performance penality!
** PROGRESS Add `override' specifier to derived versions of virtual functions
:LOGBOOK:
- State "PROGRESS"   from "TODO"       [2016-12-09 Fri 12:10]
:END:
*** PROGRESS remove `virtual' keyword where unnecessary
:LOGBOOK:
- State "PROGRESS"   from "TODO"       [2016-12-09 Fri 12:10]
:END:
*** PROGRESS remove duplicate definitions of virtual functions
:LOGBOOK:
- State "PROGRESS"   from "TODO"       [2016-12-09 Fri 12:10]
:END:
** TODO Replace repeated calls to ``getters'' (eg frontend()->something) with local variables
** DONE Make all frontend classes derive from a shared root, with basic elements such as void* _backend and empty prepare_backend_extra
CLOSED: [2016-11-24 Thu 13:40]
:LOGBOOK:
- State "DONE"       from "TODO"       [2016-11-24 Thu 13:40]
:END:
** DONE Add frontend member pointer to backend classes; and add it to `prepare' call
CLOSED: [2016-11-24 Thu 15:55]
:LOGBOOK:
- State "DONE"       from "PROGRESS"   [2016-11-24 Thu 15:55]
- State "PROGRESS"   from "TODO"       [2016-11-24 Thu 14:20]
:END:
** TODO RecordingElectrodes: integrate prepare/reset functions, and backend
** TODO STDP: check that the correct neurons/input_neurons distinction is made for all kernel calls and memory transfers
** PROGRESS Synapses: check Neurons for how to implement common functions
:LOGBOOK:
- State "PROGRESS"   from "TODO"       [2016-11-21 Mon 17:25]
:END:
+ eg prepare and reset
** DONE Neurons: Add NeuronsCommon class with virtual inheritance
CLOSED: [2016-11-24 Thu 13:55]
:LOGBOOK:
- State "DONE"       from "TODO"       [2016-11-24 Thu 13:55]
:END:
** PROGRESS Think about how to make calls to backend hierarchy irrepetitious (cf, reset_state call).
:LOGBOOK:
- State "PROGRESS"   from "TODO"       [2016-11-24 Thu 14:10]
:END:
+ Should backend->reset_state be a virtual method? If so, it always calls the most derived!
** TODO [FourLayerVision]SpikingModel: Split backend-specific stuff out into separate function
** PROGRESS Option to call prepare_backend implicitly using the global context
:LOGBOOK:
- State "PROGRESS"   from "TODO"       [2016-12-11 Sun 00:50]
:END:
+ If prepare_backend hasn't been called before backend is needed, then we should not just crash.
+ Instead, we should have a compile-time option to call prepare_backend implicitly using the global context.
  + This would mean that adding prepare_backend calls to legacy code should not be needed.
+ On the other hand, it is likely to end up necessary, in a number of places, to add code to prepare_backend_extra() in order to set the device up correctly.
+ prepare_backend calls will then replace current backend-specific preparatory calls.
** PROGRESS Connect up front and back ends
:LOGBOOK:
- State "PROGRESS"   from "TODO"       [2016-11-30 Wed 15:40]
:END:
+ eg update_membrane_potentials, memory synchrony, etc etc
+ what should the API look like?
** TODO Always check pointers before freeing!
** DONE Add macro for getting correct cast of backend pointer
CLOSED: [2016-11-24 Thu 14:10]
:LOGBOOK:
- State "DONE"       from "TODO"       [2016-11-24 Thu 14:10]
:END:
* TODO Put external dependencies (eg mgl) into git submodules
* TODO Move tests to CTest ?
* TODO Write SYCL backend.
* TODO Write plain C++ backend. (Use ViennaCL for linalg acceleration?)
* TODO Write rate-coded neuron/synapse/model classes.
